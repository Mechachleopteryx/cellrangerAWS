import os 
import re
import glob

""" Snakerules for running 10x cellranger """

def _collect_groups(wildcards):
    """generate a csv file with path to molecule_info.h5 for each expt
    group. Return group_id and path to csv as a list """
     
    groups = wildcards.expt_groups
    data   = wildcards.data

    groups = groups.split(",")
    outdir = "".join({RESULTS})

    out = open(groups[0] + "_groups_def.csv", 'w')
    out.write("library_id,molecule_h5\n")

    for group in groups: 
        if group is "":
            continue

        library = group.strip(" ")
        path    = os.path.join(outdir, library, "outs", "molecule_info.h5")

        out.write("{},{}\n".format(library, path))
    
    out.close()

    # return list with group id and path to csv
    return [groups[0][:-1] + "_aggr", groups[0] + "_groups_def.csv"]


def _get_sample_ids(wildcards):
    """ extract out sample prefixes from fastqs to pass to cellranger
    i.e. given the following fastqs
    sample_name_1_S1_L001_R1_001.fastq.gz"
    sample_name_2_S2_L001_R1_001.fastq.gz"
    sample_name_3_S3_L001_R1_001.fastq.gz"

    return:
    sample_name_1,sample_name_2,sample_name_3
    """

    no_lane = "_S[0-9]+_[RI][12]_001\.fastq\.gz$"
    lane    = "_S[0-9]+_L[0-9]{3}_[RI][12]_001\.fastq\.gz$"

    fq_dir = "".join({DATA})
    fqs    = glob.glob(os.path.join(fq_dir, wildcards.sample + "*"))
    R1_fqs = [x for x in fqs if "R1" in x]
    R1_fqs = [os.path.basename(x) for x in R1_fqs]

    sample_ids = set()

    for fq in R1_fqs:
        if re.search(lane, fq) is not None:
            sample_id = re.sub(lane, "", fq)
            sample_ids.add(sample_id)

        elif re.search(no_lane, fq) is not None:
            # Novaseq style S1 flowcell
            sample_id = re.sub(no_lane, "", fq)
            sample_ids.add(sample_id)

        else:
            sys.exit("unable to parse out sample id from {}".format(fq))

    return ",".join(sample_ids)

def _get_sample_fq_paths(wildcards):
    """ generate list of fastqs that contain sample prefix 
    """
    
    sample_ids = _get_sample_ids(wildcards)
    sample_ids = sample_ids.split(",")

    fq_dir    = "".join({DATA})
    input_fqs = set()

    for sample in sample_ids:
      
        r1_pattern = sample + "*" + "R1_001.fastq.gz"
      
        r1s   = glob.glob(os.path.join(fq_dir, r1_pattern))
        r2s   = [re.sub("_R1_001.fastq.gz$", "_R2_001.fastq.gz", x) for x in r1s] 
        reads = r1s + r2s

        for read in reads:
            input_fqs.add(read)
    
    print("running cellranger on the following fqs\nfastq\tsample", file = sys.stderr) 

    for fq in input_fqs:
        print("{}\t{}".format(fq, wildcards.sample), file = sys.stderr)

    return input_fqs

rule cellranger_count:
    """ note that cellranger count will fail if the output directory
    specified with ``--id`` exists prior to running. By default Snakemake 
    will generate directories listed in the input and output params, so to
    avoid this error this rule creates a dummy file "{sample}_complete.txt """

    input:
        _get_sample_fq_paths
    output:
        "{results}/logs/{sample}.out"
    params:
        fqs    = _get_sample_ids,
        outdir = {RESULTS},
        indir  = {DATA}
    log:
	"{results}/logs/{sample}"
    threads:
        1
    shell:
        """
        set -x

        echo {params.fqs}

        {HOME}/cellranger-3.0.2/cellranger count \
            --id={wildcards.sample} \
            --fastqs={params.indir} \
            --sample={params.fqs} \
            --jobmode=local \
            --project="scRNA-seq" \
            --transcriptome={GENOME}

        mkdir -p {params.outdir}
        mv -u {wildcards.sample} {params.outdir}

        touch {output}
        """


