# ===== Pipeline for running cellranger ========================================


# Configure shell for all rules 
shell.executable("/bin/bash")
shell.prefix("set -o nounset -o pipefail -o errexit -x; ")
import multiprocessing
import subprocess
import shutil
import psutil
import glob
import os 
import re

# Function to check paths for input files/directories
def _check_path(path):
    if os.path.exists(path):
        return os.path.abspath(path)
    else:
        sys.exit("ERROR: " + path + " does not exist.")

# Directories
HOME       = os.path.expanduser("~")
CELLRANGER = HOME + "/cellranger-3.1.0/cellranger"
RAW_DATA   = HOME + "/DATA/"
RESULTS    = HOME + "/RESULTS/"
REF        = HOME + "/REF/"
ADT_REF    = REF + "/Totalseq-Barcode-Sequence-NoGeneID.csv"

CELLRANGER = _check_path(CELLRANGER)
RAW_DATA   = _check_path(RAW_DATA)
RESULTS    = _check_path(RESULTS)
ADT_REF    = _check_path(ADT_REF)

# Parameters from config.yaml
GENOME      = config["GENOME"]
RNA_SAMPLES = config["RNA_SAMPLES"]
ADT_SAMPLES = config["ADT_SAMPLES"]
ANTIBODIES  = config["ANTIBODIES"]
VDJ_SAMPLES = config["VDJ_SAMPLES"]

# Genome references
REFERENCES = {
    "GRCh38" : {
        "RNA_REF" : "refdata-cellranger-GRCh38-3.0.0",
        "VDJ_REF" : "refdata-cellranger-vdj-GRCh38-alts-ensembl-3.1.0"
    },
    "GRCm38" : {
        "RNA_REF" : "refdata-cellranger-mm10-3.0.0",
        "VDJ_REF" : "refdata-cellranger-vdj-GRCm38-alts-ensembl-3.1.0"
    },
    "tiny" : {
        "RNA_REF" : "tiny",
        "VDJ_REF" : ""
    }
}

RNA_REF = REFERENCES[GENOME]["RNA_REF"]
RNA_REF = REF + RNA_REF
RNA_REF = _check_path(RNA_REF)

VDJ_REF = REFERENCES[GENOME]["VDJ_REF"]
VDJ_REF = REF + VDJ_REF
VDJ_REF = _check_path(VDJ_REF)

# Set sample names
FASTQ_REGEX = "_S[0-9]+_L[0-9]+_R[12]_[0-9]+\.fastq\.gz"

if RNA_SAMPLES:
    RNA_SAMPLES = [x.strip() for x in RNA_SAMPLES]
    SAMPLES     = RNA_SAMPLES
    N_SAMPLES   = len(RNA_SAMPLES)

if ADT_SAMPLES:
    ADT_SAMPLES = [re.sub(" ", "", x) for x in ADT_SAMPLES]
    SAMPLES     = [re.sub(",", "_", x) for x in ADT_SAMPLES]
    ADT_REF     = _check_path(ADT_REF)
    N_SAMPLES   = len(ADT_SAMPLES)

    if RNA_SAMPLES:
        SAMPLES   = [x + "-" + y for x, y in zip(RNA_SAMPLES, SAMPLES)]
        N_SAMPLES = max(N_SAMPLES, len(RNA_SAMPLES))

if VDJ_SAMPLES:
    VDJ_SAMPLES = [x.strip() for x in VDJ_SAMPLES]
    VDJ_REF     = _check_path(VDJ_REF)
    N_SAMPLES   = N_SAMPLES + len(VDJ_SAMPLES)

# Set job resources
N_THREADS   = multiprocessing.cpu_count() * 0.89
JOB_THREADS = int(N_THREADS / N_SAMPLES)
TOTAL_MEM   = psutil.virtual_memory().total / 1000000000 * 0.89
JOB_MEM     = int(TOTAL_MEM / N_SAMPLES)

# Final output files
rule all:
    input:
        expand(
            "{results}/logs/antibody_csv.out",
            results = RESULTS
        ),
        expand(
            "{results}/logs/{sample}_count.out", 
            results = RESULTS, sample = SAMPLES
        ),
        expand(
            "{results}/logs/{vdj_sample}_vdj.out",
            results = RESULTS, vdj_sample = VDJ_SAMPLES
        )

include: HOME + "/PIPELINE/cellranger.snake"



