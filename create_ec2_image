#! /bin/bash

set -x -o pipefail



# Inputs
EC2_TYPE="t2.micro"
AMI="ami-07b4f3c02c7f83d59"  # Ubuntu 18.04 server image
VOLUME_SIZE=100
ZONE="us-west-2a"
KEY="$HOME/.ssh/sheridar-key-pair-uswest2.pem"
SECURITY_GROUP="sg-00cf9318d9719735d"
SUBNET="subnet-083a3a855e543ee1c"
IMAGE_NAME="ubuntu_cellranger_5"
USER="ubuntu"
DESCRIPTION="This image is configured to run cellranger"



# Function to check instance/volume state
check_state() {
    local input_fun=$1

    for i in $(seq 1 60)
    do
        state=$("$input_fun")

        if [[ ! -z $state ]]
        then
            break
        fi

        sleep 5
    done
}



# Launch EC2 instance with custom EBS size
# When using default VPC the instance does not have internet access. To resolve
# this create new VPC, security group, subnet, and internet gateway. Activate
# public IP for subnet, activate public DNS for VPC, attach VPC to internet
# gateway, modify route table for VPC.
key_name=$(basename -s .pem "$KEY")
root_dev=$(
    aws ec2 describe-images \
        --image-id "$AMI" \
        | grep -B 1 "Ebs" \
        | grep -E -o "/dev/[[:alnum:]]+"
)

ec2_id=$(
    aws ec2 run-instances \
        --image-id "$AMI" \
        --instance-type "$EC2_TYPE" \
	--placement AvailabilityZone="$ZONE" \
        --block-device-mapping DeviceName="$root_dev",Ebs={VolumeSize="$VOLUME_SIZE"} \
        --key-name "$key_name" \
        --associate-public-ip-address \
        --security-group-ids "$SECURITY_GROUP" \
        --subnet-id "$SUBNET" \
        | grep -E -o "InstanceId\": \"i\-[[:alnum:]]+" \
        | grep -E -o "i\-[[:alnum:]]+"
)

running_ec2() {
    aws ec2 describe-instances \
        --instance-id "$ec2_id" \
        --filters Name=instance-state-name,Values=running \
        | grep -o "$ec2_id"
}

check_state running_ec2

sleep 120



# Retrieve public DNS for ssh
# Public DNS is not listed in run-instances output
pub_dns=$(
    aws ec2 describe-instances \
        --instance-id "$ec2_id" \
        | grep -E -o "ec2\-[[:alnum:]\.\-]+compute.amazonaws.com" \
        | head -n 1
)

ssh="$USER@$pub_dns"



# Install packages on EC2 instance
ssh -o "StrictHostKeyChecking no" -i "$KEY" "$ssh" bash <<EOF
    sudo apt-get update
    sudo apt-get -y install python3-pip
    pip3 install snakemake
EOF



# Transfer snakemake pipeline to EC2 instance
ec2_home="/home/$USER"
ec2_pipeline="$ec2_home/PIPELINE"

scp -r -i "$KEY" PIPELINE "$ssh":/home/"$USER"

ssh -i "$KEY" "$ssh" bash <<EOF
    tar -zxf "$ec2_pipeline"/cellranger-3.0.2.tar.gz
    rm "$ec2_pipeline"/cellranger-3.0.2.tar.gz
EOF

#tar -zxf "$ec2_pipeline"/ref/GRCh38.tar.gz -C "$ec2_pipeline"/ref
#rm "$ec2_pipeline"/ref/*.tar.gz



# Save EC2 instance image
image_id=$(
    aws ec2 create-image \
        --instance-id "$ec2_id" \
        --name "$IMAGE_NAME" \
        --description "$DESCRIPTION" \
        | grep -E -o "ami\-[[:alnum:]]+"
)

avail_image() {
    aws ec2 describe-images \
        --image-id "$image_id" \
        --filters Name=state,Values=available \
        | grep -E -o "ami\-[[:alnum:]]+"
}

check_state avail_image



# Terminate EC2 instance
#aws ec2 terminate-instances \
#    --instance-ids "$ec2_id"



